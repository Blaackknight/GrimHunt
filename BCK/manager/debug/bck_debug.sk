on load:
    if {skripts::*} contains "core.sk" and "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading debug..." to console
        send "§6[§4BCK§6/§3Debug§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/debug/test.yml" as "bck.manager.debug.test"
        #load yaml "plugins/Skript/scripts/BCK/manager/other/data.yml" as "bck.manager.clan.data"
    else:
        broadcast "§6[§4BCK§6/§3Debug§6]§r Script loading cancel It requires (§lcore.sk§r and §lbck_manager.sk§r)"
command /bck_debug [<integer=1>]:
    trigger:
        add arg-1 to {grimhunt.%player's uuid%.money}
        # loop all entities:
        #     set {_e} to loop-value
        #     set {_t} to type of {_e}
        #     broadcast "smoker.%{_t}%"
        #     wait 3 tick
        # set {_v} to arg-1
        # if {_v} contain "s":
        #     set {_u} to "s"
        # else if {_v} contain "m":
        #     set {_u} to "m"
        # else:
        #     set {_u} to "s"
        #     set {_v} to "%{_v}%s"
        # set {_d::*} to {_v} split by {_u}
        # #broadcast "%{_v}%"
        # set {_time} to {_d::1} parsed as integer
        # if {_u} is "m":
        #     set {_time} to {_time} * 60
        # # broadcast "%{_test}%§nm§r%{_tast}%§ns§r (%{_time}%)"
        # loop {_time}+1 times:
        #     if {_time} > 60:
        #         set {_test} to {_time} / 60 
        #         set {_tast} to mod({_time}, 60)
        #         if "%{_test}%" contain ".":
        #             set {_b::*} to "%{_test}%" split by "."
        #             set {_test} to {_b::1} parsed as integer
        #         send title "§b§l%{_test}%§nm§r§d§l%{_tast}%§ns§r" to player
        #     else:
        #         send title "§d§l%{_time}%§ns§r" to player
        #     remove 1 from {_time}
        #     wait 0.9 seconds
        #make console execute command "/sk reload scripts"
        #debug(player, arg-1)
        # set {_af} to lang("debug.afterDebug", player)
        # bckTimer("%{_af}% §a(%arg-1%)", player, arg-1)

function debug(player: player, lang: text="en"):
    set {_inv} to {_player}'s inventory
    set {_items::*} to all items
    loop {_items::*}:
        set {_i} to loop-value
        set {_player}'s tool to {_i}
        set {_n} to display name of {_player}'s tool
        if "%{_n}%" is "<none>":
            set {_n} to {_i}
        set yaml value "%{_lang}%.%{_i}%" from "bck.manager.debug.test" to "%{_n}%"
    save "bck.manager.debug.test"
function bckTimer(send: text, player: player, time: text="1s"):
    if {_time} contain "s":
        set {_t} to {_time}
        replace "s" with "" in {_t}
        set {_t} to {_t} parsed as integer
        send lang("debug.beforeDebug", {_player}) to {_player}
        set {_c} to {_t} - 1
        set {_bar} to lang("debug.actionbar", {_player})
        send actionbar "%{_bar}% §b%{_t}%s" to {_player}
        loop {_t} times: 
            wait 1 seconds
            set {_bar} to lang("debug.actionbar", {_player})
            send actionbar "%{_bar}% §b%{_c}%s" to {_player}
            remove 1 from {_c}
        send {_send} to {_player}
    else if {_time} contain "m":
        set {_t} to {_time}
        replace "m" with "" in {_t}
        set {_t} to {_t} parsed as integer
        send lang("debug.beforeDebug", {_player}) to {_player}
        set {_c} to {_t} - 1
        set {_bar} to lang("debug.actionbar", {_player})
        send actionbar "%{_bar}% §b%{_t}%m" to {_player}
        loop {_t} times:
            wait 1 minutes
            set {_bar} to lang("debug.actionbar", {_player})
            send actionbar "%{_bar}% §b%{_c}%m" to {_player}
            remove 1 from {_c}
        send {_send} to {_player}
    