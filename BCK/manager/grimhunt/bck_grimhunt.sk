on load:
    if {skripts::*} contains "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading grimhunt..." to console
        wait 2 seconds
        send "§6[§4BCK§6/§5Grimhunt§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/grimhunt/config.yml" as "bck.manager.grimhunt.config"
        load yaml "plugins/Skript/scripts/BCK/manager/grimhunt/data.yml" as "bck.manager.grimhunt.data"
        grimhuntLoad()
    else:
        broadcast "§6[§4BCK§6/§5Grimhunt§6]§r Script loading cancel It require (bck_manager.sk)"
        unload script file "bck_grimhunt.sk"
    stop
#                                      txtGiver command                                                                          #
command /txtGiver [<text>]:
    trigger:
        if arg-1 is set:
            set {_i} to arg-1 parsed as item
            give {_i} to player
on tab complete of "/txtGiver":
    if hasPermission(player, "server.command.txtGiver") is false:
        stop
    set tab completions for position 1 to all items
command /msk [<text>]:
    trigger:
        if arg-1 is set:
            set {_a} to arg-1
            replace "minecraft:" with "" in {_a}
            set {_r} to convertMinecraftToSkriptString({_a})
            send "§6[§4BCK§6]§r §d%{_a}% §e-> §b%{_r}%"
command /skm [<text>]:
    trigger:
        if arg-1 is set:
            set {_a} to arg-1
            set {_r} to convertSkriptToMinecraftString({_a}, true)
            send "§6[§4BCK§6]§r §d%{_a}% §e-> §b%{_r}%"
command /tg [<number=0>] [<number=10>]:
    trigger:
        set {_c} to 0
        loop minecraftBaseItemsListItem():
            if {_c} < arg-2:
                if {_c} >= arg-1:
                    genericItemGive(player, loop-value)
                add 1 to {_c}
on tab complete of "/msk":
    if hasPermission(player, "server.command.msk") is false:
        stop
    set tab completions for position 1 to minecraftBaseItemsList()
on tab complete of "/skm":
    if hasPermission(player, "server.command.skm") is false:
        stop
    set tab completions for position 1 to all items
#                                      grimhunt command                                                                          #
command /grimhunt [<text>] [<text>]:
    trigger:
        if arg-1 is not set:
            send formatted commandError("grimhunt", "false", player)
            stop
        else if arg-1 is "runners":
            if listCounter({bck.runners::*}) is 0:
                set {_no} to lang("grimhunt.command.no_runners", player)
                send "§6[§5Grimhunt§6] %{_no}%"
                stop
            set {_t} to ""
            loop {bck.runners::*}:
                set {_s} to selector(loop-value)
                if loop-index is "1":
                    set {_t} to "§e-> §a%{_s}%"
                else:
                    set {_t} to "%{_t}%%nl%§e-> §a%{_s}%"
            set {_rl} to lang("grimhunt.command.runners_list", player)
            send formatted "§6[§5Grimhunt§6] %{_rl}%%nl%%{_t}%"
        else if arg-1 is "hunters":
            if listCounter({bck.hunters::*}) is 0:
                set {_no} to lang("grimhunt.command.no_hunters", player)
                send "§6[§5Grimhunt§6] %{_no}%"
                stop
            set {_t} to ""
            loop {bck.hunters::*}:
                set {_s} to selector(loop-value)
                if loop-index is "1":
                    set {_t} to "§e-> §4%{_s}%"
                else:
                    set {_t} to "%{_t}%%nl%§e-> §4%{_s}%"
            set {_hl} to lang("grimhunt.command.hunters_list", player)
            send formatted "§6[§5Grimhunt§6] %{_hl}%§r%nl%%{_t}%"
        else if arg-1 is "start":
            if {grimhunt.game.started} is not set:
                if listCounter({bck.hunters::*}) < 1:
                    if  listCounter({bck.runners::*}) < 1:
                        send "§6[§5grimhunt§6] §cMissing §a1 Runner §cand §41 Hunter §cfor starting.."
                        stop
                    else:
                        send "§6[§5grimhunt§6] §cMissing §41 Hunter §cfor starting.."
                        stop
                else:
                    if  listCounter({bck.runners::*}) < 1:
                        send "§6[§5grimhunt§6] §cMissing §a1 Runner §cfor starting.."
                        stop
                set {grimhunt.game.started} to true
                grimhuntTeamCreate(true)
                grimhuntTeamJoin(true)
                
                loop {bck.hunters::*}:
                    removePermission(loop-value, "player.move", true)
                    set {grimhunt.compass.%loop-value%.num} to 1
                loop {bck.runners::*}:
                    userData(loop-value, "data.grimhunt.temp.dead", "set", "false")
                loop grimhuntPlayersList():
                    set {_bg} to loop-value
                    teleport {_bg} to player
                # make console execute command "/tp @a[team=bck_runners] %player%"
                # make console execute command "/tp @a[team=bck_hunters] %player%"
                set {_time} to grimhuntData("start.time")
                set {_u} to "s"
                if {_time} contain "s" or "second" or "seconds":
                    set {_u} to "s"
                else if {_time} contain "m" or "minute" or "minutes":
                    set {_u} to "m"
                else:
                    set {_time} to "%{_time}%s"
                set {_data::*} to {_time} split by {_u}
                set {_timer} to {_data::1} parsed as integer
                if {_u} is "m":
                    set {_timer} to {_timer} * 60
                set {_timer.5} to {_timer} / 2
                set {_timer.25} to {_timer} / 4
                set {_timer.50} to {_timer} / 2
                set {_timer.75} to {_timer} / 1.32
                set {_timer.100} to {_timer} / 1
                set {_timer.75} to ceil({_timer.75})
                grimhuntPlayersLangSend("grimhunt.command.start.begins.1", "title")
                wait 1 seconds
                grimhuntPlayersLangSend("grimhunt.command.start.begins.2", "title")
                wait 1 seconds
                grimhuntPlayersLangSend("grimhunt.command.start.begins.3", "title")
                wait 1 seconds
                grimhuntPlayersLangSend("grimhunt.command.start.begins.1", "title")
                wait 1 seconds
                grimhuntPlayersLangSend("grimhunt.command.start.runners_running")
                loop {bck.runners::*}:
                    grimhuntHeal(loop-value)
                    grimhuntFeed(loop-value)
                    grimhuntClear(loop-value)
                    grimhuntClearAdvancements(loop-value)
                    grimhuntKits(loop-value)                    
                wait 1 seconds
                set {bck.grimhunt.chat} to true  
                grimhuntPlayersLangSend("grimhunt.command.start.chatActivated") 
                #broadcast "100: %{_timer.100}%%nl%75: %{_timer.75}%%nl%50: %{_timer.50}%%nl%25: %{_timer.25}%%nl%5: %{_timer.5}%"
                loop grimhuntPlayersList():
                    set {_x} to loop-value
                    set {_x}'s level to {_timer.100} 

                set {_ff} to {_timer.100}
                loop {_ff}+1 times:
                    if {_ff} > 60:
                        set {_m} to {_ff} / 60 
                        set {_s} to mod({_ff}, 60)
                        if "%{_m}%" contain ".":
                            set {_b::*} to "%{_m}%" split by "."
                            set {_m} to {_b::1} parsed as integer
                        set {_converted} to "§6%{_m}%§d§n§lm§r§6%{_s}%§a§n§ls§r"
                    else:
                        set {_co} to "§6"
                        if {_ff} is 5:
                            set {_co} to "§4"
                        else if {_ff} is 4:
                            set {_co} to "§c"
                        else if {_ff} is 3:
                            set {_co} to "§6"
                        else if {_ff} is 2:
                            set {_co} to "§e"
                        else if {_ff} is 1:
                            set {_co} to "§2"
                        else if {_ff} is 0:
                            set {_co} to "§a"
                        set {_converted} to "%{_co}%%{_ff}%§n§ls§r"
                    set {_txt} to "%{_converted}%"
                    add {_txt} to {_args::*}
                    grimhuntPlayersMultiLangSend("grimhunt.command.start.timer", {_args::*}, "title")
                    if {_ff} is 5:
                        loop grimhuntPlayersList():
                            set {_bg} to loop-value-2
                            play sound "entity.experience_orb.pickup" with volume 1 with pitch 0.5 for {_bg}
                    else if {_ff} is 4:
                        loop grimhuntPlayersList():
                            set {_bg} to loop-value-2
                            play sound "entity.experience_orb.pickup" with volume 1 with pitch 0.6 for {_bg}
                    else if {_ff} is 3:
                        loop grimhuntPlayersList():
                            set {_bg} to loop-value-2
                            play sound "entity.experience_orb.pickup" with volume 1 with pitch 0.7 for {_bg}
                    else if {_ff} is 2:
                        loop grimhuntPlayersList():
                            set {_bg} to loop-value-2
                            play sound "entity.experience_orb.pickup" with volume 1 with pitch 0.8 for {_bg}
                    else if {_ff} is 1:
                        loop grimhuntPlayersList():
                            set {_bg} to loop-value-2
                            play sound "entity.experience_orb.pickup" with volume 1 with pitch 0.9 for {_bg}   
                    else if {_ff} is 0:
                        loop grimhuntPlayersList():
                            set {_bg} to loop-value-2
                            play sound "entity.experience_orb.pickup" with volume 1 with pitch 1 for {_bg}  
                    loop grimhuntPlayersList():
                        set {_x} to loop-value-2
                        set {_x}'s level to {_ff} 
                    remove 1 from {_ff}
                    clear {_args::*}
                    wait 1 seconds
                wait 1 tick
                set {_sound} to grimhuntData("start.sound")
                replace all "_" with "." in {_sound}
                replace all " " with "." in {_sound}
                loop {bck.hunters::*}:
                    play sound {_sound} with volume 0.7 for loop-value
                loop {bck.runners::*}:
                    play sound {_sound} with volume 0.7 for loop-value
                    grimhuntPlayersLangSend("grimhunt.command.start.starting", "title")
                grimhuntDay()
                loop {bck.hunters::*}:
                    grimhuntHeal(loop-value)
                    grimhuntFeed(loop-value)
                    grimhuntClear(loop-value)
                    addPermission(loop-value, "player.move", true)
                    grimhuntCompassGive(loop-value)
                    grimhuntClearAdvancements(loop-value)
            else:
                send lang("grimhunt.command.start.alreadyStarted", player)
        else if arg-1 is "stop":
            if {grimhunt.game.started} is true:
                clear {grimhunt.game.started}
                clear {bck.grimhunt.chat}
                grimhuntTeamDelete(true)
                loop {bck.hunters::*}:
                    addPermission(loop-value, "player.move", true)
                    set {grimhunt.compass.%loop-value%.num} to 1
                if grimhuntDataBoolean("keepTeam.status") is false:
                    clear {bck.hunters::*}
                    clear {bck.runners::*}
            else:
                send lang("grimhunt.command.stop.notStarted", player)
        else if arg-1 is "info":
        
        else if arg-1 is "config":
            set {_gui} to genericGui(lang("grimhunt.command.config.gui.title", player), 5, true)
            set slot 22 of {_gui} to redstone block named "§4Wait.."
            userData(player, "data.inv", "set", "manager.grimhunt.config.main")
            open {_gui} to player
            grimhuntConfigGuiUpdater(player)
        else if arg-1 is "wiki":

        else if arg-1 is "admin.allList":
            if hasPermission(player, "server.owner") is false:
                if "%player%" is not "<none>":
                    send formatted commandError("grimhunt", arg-1, player)
                    stop
            set {_i::*} to all items
            loop {_i::*}:
                set {_value.1} to loop-value
                if {_value.1} is air:
                    set yaml value "all.air" from "bck.core.bdd" to "air"
                    send actionbar "§6[§4BCK§6/§dAll§6]§r air" to player
                    save yaml "bck.core.bdd"
                else:
                    set player's tool to 1 of {_value.1}
                    set {_id} to raw name of player's tool
                    replace "minecraft:" with "" in {_id}
                    if {_id} is not "air":
                        set yaml value "all.%{_id}%" from "bck.core.bdd" to "%{_value.1}%"
                        save yaml "bck.core.bdd"
                        send actionbar "§6[§4BCK§6/§dAll§6]§r %{_id}%" to player
            set {_b::*} to all blocks
            loop {_b::*}:
                set {_value.1} to loop-value
                if {_value.1} is air:
                    set yaml value "blocks.air" from "bck.core.bdd" to "air"
                    send actionbar "§6[§4BCK§6/§bBlocks§6]§r air" to player
                    save yaml "bck.core.bdd"
                else:
                    set player's tool to 1 of {_value.1}
                    set {_id} to raw name of player's tool
                    replace "minecraft:" with "" in {_id}
                    if {_id} is not "air":
                        set yaml value "blocks.%{_id}%" from "bck.core.bdd" to "%{_value.1}%"
                        save yaml "bck.core.bdd"
                        send actionbar "§6[§4BCK§6/§bBlocks§6]§r %{_id}%" to player
            loop {_i::*}:
                set {_value.1} to loop-value
                if {_b::*} doesn't contain {_value.1}:
                    if {_value.1} is air:
                        set yaml value "items.air" from "bck.core.bdd" to "air"
                        send actionbar "§6[§4BCK§6/§eItems§6]§r air" to player
                        save yaml "bck.core.bdd"
                    else:
                        set player's tool to 1 of {_value.1}
                        set {_id} to raw name of player's tool
                        replace "minecraft:" with "" in {_id}
                        if {_id} is not "air":
                            set yaml value "items.%{_id}%" from "bck.core.bdd" to "%{_value.1}%"
                            save yaml "bck.core.bdd"
                            send actionbar "§6[§4BCK§6/§eItems§6]§r %{_id}%" to player
            set player's tool to 1 of air
            send actionbar "§6[§4BCK§6]§r §n§m§aFinish" to player
        else if arg-1 is "admin.start":
            if hasPermission(player, "server.owner") is false:
                if "%player%" is not "<none>":
                    send formatted commandError("grimhunt", arg-1, player)
                    stop
            play sound "entity.experience_orb.pickup" with volume 0.3 for player
            set {grimhunt.game.started} to true
        else if arg-1 is "admin.stop":
            if hasPermission(player, "server.owner") is false:
                if "%player%" is not "<none>":
                    send formatted commandError("grimhunt", arg-1, player)
                    stop
            play sound "entity.villager.no" with volume 0.5 for player
            clear {grimhunt.game.started}
        else if arg-1 is "revive":
            set {_x} to arg-2
            set {_x} to {_x} parsed as player
            if {_x} is not set:
                send formatted commandError("grimhunt", arg-1, player)
                stop
            if {grimhunt.game.started} is not set:
                send formatted lang("grimhunt.command.revive.gameNoStarted", player)
                stop
            if userData({_x}, "data.grimhunt.temp.dead") is "true":
                set {_s} to 0
                loop 36 times:
                    set {_i} to yaml value "inventory.%{_x}%.%{_s}%" from "bck.manager.grimhunt.data"
                    #set {_i} to {_i} parsed as item
                    set slot {_s} of {_x}'s inventory to {_i}
                    add 1 to {_s}
                set {_w.00} to yaml value "inventory.%{_x}%.helmet" from "bck.manager.grimhunt.data"
                set {_w.01} to yaml value "inventory.%{_x}%.chestplate" from "bck.manager.grimhunt.data"
                set {_w.02} to yaml value "inventory.%{_x}%.leggings" from "bck.manager.grimhunt.data"
                set {_w.03} to yaml value "inventory.%{_x}%.boots" from "bck.manager.grimhunt.data"
                set {_w.04} to yaml value "inventory.%{_x}%.off_hand" from "bck.manager.grimhunt.data"
                set {_xb} to yaml value "inventory.%{_x}%.location" from "bck.manager.grimhunt.data"
                set {_loc} to {_xb}
                set {_x}'s helmet to {_w.00}
                set {_x}'s chestplate to {_w.01}
                set {_x}'s leggings to {_w.02}
                set {_x}'s boots to {_w.03}
                set {_x}'s offhand tool to {_w.04}
                set gamemode of {_x} to survival
                teleport {_x} to {_loc}
                set {_z.1} to lang("grimhunt.command.revive.revived.1", player)
                set {_z.2} to lang("grimhunt.command.revive.revived.2", player)
                set {_z.0} to "%{_z.1}% §a%selector({_x})%§r %{_z.2}%"
                send formatted {_z.0} to player
                send formatted lang("grimhunt.command.revive.gotRevived", {_x}) to {_x}
                userData({_x}, "data.grimhunt.temp.dead", "set", "false")
            else:
                set {_t} to lang("grimhunt.command.revive.notDead.1", player)
                set {_tt} to lang("grimhunt.command.revive.notDead.2", player)
                send formatted "%{_t}% %{_x}% %{_tt}%"
        else:
            send formatted commandError("grimhunt", arg-1, player)
            stop
#                                      grimhuntPlayersSend functions                                                                          #
function grimhuntPlayersSend(text: text, type: text="normal"):
    if {_type} is "normal":
        send formatted {_text} to {bck.hunters::*}
        send formatted {_text} to {bck.runners::*}
    else:
        send title {_text} to {bck.hunters::*}
        send title {_text} to {bck.runners::*}
#                                      grimhuntPlayersLangSend functions                                                                          #
function grimhuntPlayersLangSend(key: text, type: text="normal"):
    if {_type} is "normal":
        loop {bck.hunters::*}:
            set {_x} to loop-value
            send formatted lang({_key}, {_x}) to {_x}
        loop {bck.runners::*}:
            set {_x} to loop-value
            send formatted lang({_key}, {_x}) to {_x}
    else:
        loop {bck.hunters::*}:
            set {_x} to loop-value
            send title lang({_key}, {_x}) to {_x}
        loop {bck.runners::*}:
            set {_x} to loop-value
            send title lang({_key}, {_x}) to {_x}
#                                      grimhuntLoad functions                                                                          #
function grimhuntLoad():
    set {_data::*} to yaml list "data.grimhunt.load.options" from "bck.manager.grimhunt.config"
    if file "plugins/GrimHunt/config.yml" doesn't exist:
        send "§6[§4BCK§6/§5Grimhunt§6]§r §eInitialization.." to console
        create script "plugins/GrimHunt/config.yml"
        write "##                                                                                                                              " at line 1 to file "plugins/GrimHunt/config.yml"
        write "##       _____         _____    ____      ______  _______          ____   ____  ____   ____  _____   ______   _________________ " at line 2 to file "plugins/GrimHunt/config.yml"
        write "##   ___|\    \    ___|\    \  |    |    |      \/       \        |    | |    ||    | |    ||\    \ |\     \ /                 \" at line 3 to file "plugins/GrimHunt/config.yml"
        write "##  /    /\    \  |    |\    \ |    |   /          /\     \       |    | |    ||    | |    | \\    \| \     \\______     ______/" at line 4 to file "plugins/GrimHunt/config.yml"
        write "## |    |  |____| |    | |    ||    |  /     /\   / /\     |      |    |_|    ||    | |    |  \|    \  \     |  \( /    /  )/   " at line 5 to file "plugins/GrimHunt/config.yml"
        write "## |    |    ____ |    |/____/ |    | /     /\ \_/ / /    /|      |    .-.    ||    | |    |   |     \  |    |   ' |   |   '     " at line 6 to file "plugins/GrimHunt/config.yml"
        write "## |    |   |    ||    |\    \ |    ||     |  \|_|/ /    / |      |    | |    ||    | |    |   |      \ |    |     |   |        " at line 7 to file "plugins/GrimHunt/config.yml"
        write "## |    |   |_,  ||    | |    ||    ||     |       |    |  |      |    | |    ||    | |    |   |    |\ \|    |    /   //        " at line 8 to file "plugins/GrimHunt/config.yml"
        write "## |\ ___\___/  /||____| |____||____||\____\       |____|  /      |____| |____||\___\_|____|   |____||\_____/|   /___//         " at line 9 to file "plugins/GrimHunt/config.yml"
        write "## | |   /____ / ||    | |    ||    || |    |      |    | /       |    | |    || |    |    |   |    |/ \|   ||  |`   |          " at line 10 to file "plugins/GrimHunt/config.yml"
        write "##  \|___|    | / |____| |____||____| \|____|      |____|/        |____| |____| \|____|____|   |____|   |___|/  |____|          " at line 11 to file "plugins/GrimHunt/config.yml"
        write "##    \( |____|/    \(     )/    \(      \(          )/             \(     )/      \(   )/       \(       )/      \(           " at line 12 to file "plugins/GrimHunt/config.yml"
        write "##     '   )/        '     '      '       '          '               '     '        '   '         '       '        '            " at line 13 to file "plugins/GrimHunt/config.yml"
        write "##         '                                                                                                                    " at line 14 to file "plugins/GrimHunt/config.yml"
        write "" at line 15 to file "plugins/GrimHunt/config.yml"
        write "##   ___           ___ _            _    _          _       _     _   " at line 16 to file "plugins/GrimHunt/config.yml"
        write "##  / __\_   _    / __\ | __ _  ___| | _| | ___ __ (_) __ _| |__ | |_ " at line 17 to file "plugins/GrimHunt/config.yml"
        write "## /__\// | | |  /__\// |/ _` |/ __| |/ / |/ / '_ \| |/ _` | '_ \| __|" at line 18 to file "plugins/GrimHunt/config.yml"
        write "##/ \/  \ |_| | / \/  \ | (_| | (__|   <|   <| | | | | (_| | | | | |_ " at line 19 to file "plugins/GrimHunt/config.yml"
        write "##\_____/\__, | \_____/_|\__,_|\___|_|\_\_|\_\_| |_|_|\__, |_| |_|\__|" at line 20 to file "plugins/GrimHunt/config.yml"
        write "##       |___/                                        |___/           " at line 21 to file "plugins/GrimHunt/config.yml"
        write "" at line 22 to file "plugins/GrimHunt/config.yml"
        set {_x} to 23
        set {_c} to listCounter({_data::*})
        #broadcast {_c}
        loop {_data::*}:
            write loop-value at line {_x} to file "plugins/GrimHunt/config.yml"
            add 1 to {_x}
        wait 3 ticks
        send "§6[§4BCK§6/§5Grimhunt§6]§r §eInitialization §nComplete§r§e !" to console
    wait 10 ticks
    load yaml "plugins/GrimHunt/config.yml" as "bck.server.grimhunt.config"
    send "§6[§4BCK§6/§5Grimhunt§6]§r §aLoaded file succeffully !" to console
    wait 2 ticks
    set {_d.0} to grimhuntServerConfig("start.time")
    set {_d.01} to grimhuntServerConfig("start.sound")
    set {_dx.0::*} to yaml list "join.permissions" from "bck.server.grimhunt.config"
    set {_d.02} to grimhuntServerConfigBoolean("keepTeam.status")
    set {_d.03} to grimhuntServerConfig("teamChatPrefix")
    set {_d.04} to grimhuntServerConfigBoolean("randomHunterCoordinate.status")
    set {_d.05} to grimhuntServerConfig("randomHunterCoordinate.chance")
    set {_d.06} to grimhuntServerConfigBoolean("startHeal.status")
    set {_d.07} to grimhuntServerConfigBoolean("startFeed.status")
    set {_d.08} to grimhuntServerConfigBoolean("startDay.status")
    set {_d.09} to grimhuntServerConfigBoolean("startClear.status")
    set {_d.10} to grimhuntServerConfigBoolean("startClearAdvancements.status")
    set {_d.11} to grimhuntServerConfigBoolean("particles.status")
    set {_d.12} to grimhuntServerConfigBoolean("forge.status")
    set {_d.13} to grimhuntServerConfigBoolean("forge.oresXp")
    set {_d.14} to grimhuntServerConfigBoolean("kits.status")
    set {_dx.1::*} to yaml list "kits.kit" from "bck.server.grimhunt.config"
    set {_d.15} to grimhuntServerConfigBoolean("smoker.status")
    set {_ent::*} to all entities
    set {_cc} to 2
    loop {_ent::*}:
        set {_e} to loop-value
        set {_t} to type of {_e}
        set {_gg::*} to yaml list "smoker.%{_t}%" from "bck.server.grimhunt.config"
        if {_gg::*} is "<none>":
            stop
        set {_dx.%{_cc}%::*} to {_gg::*}
        add 1 to {_cc}
    set {_r.0} to grimhuntServerConfigBoolean("rules.tnt.status")
    set {_r.01} to grimhuntServerConfigBoolean("rules.commandBlock.status")
    set {_r.02} to grimhuntServerConfigBoolean("rules.pvp.status")

    grimhuntData("start.time", "set", "%{_d.0}%")
    grimhuntData("start.sound", "set", "%{_d.01}%")
    if {_dx.0::*} is set:
        set yaml list "join.permissions" from "bck.manager.grimhunt.data" to {_dx.0::*}
        save yaml "bck.manager.grimhunt.data"
    grimhuntData("keepTeam.status", "set", "%{_d.02}%")
    grimhuntData("teamChatPrefix", "set", "%{_d.03}%")
    grimhuntData("randomHunterCoordinate.status", "set", "%{_d.04}%")
    grimhuntData("randomHunterCoordinate.chance", "set", "%{_d.05}%")
    grimhuntData("startHeal.status", "set", "%{_d.06}%")
    grimhuntData("startFeed.status", "set", "%{_d.07}%")
    grimhuntData("startDay.status", "set", "%{_d.08}%")
    grimhuntData("startClear.status", "set", "%{_d.09}%")
    grimhuntData("startClearAdvancements.status", "set", "%{_d.10}%")
    grimhuntData("particles.status", "set", "%{_d.11}%")
    grimhuntData("forge.status", "set", "%{_d.12}%")
    grimhuntData("forge.oresXp", "set", "%{_d.13}%")
    grimhuntData("kits.status", "set", "%{_d.14}%")
    grimhuntData("smoker.status", "set", "%{_d.15}%")
    grimhuntData("smoker.loots", "set", "%{_d.16}%")
    coreDataBoolean("tnt.status", "set", {_r.0})
    coreDataBoolean("commandBlock.status", "set", {_r.01})
    coreDataBoolean("pvp.status", "set", {_r.02})
    if {_dx.1::*} is set:
        set yaml list "kits.kit" from "bck.manager.grimhunt.data" to {_dx.1::*}
        save yaml "bck.manager.grimhunt.data"
    set {_aa} to 2
    loop {_ent::*}:
        set {_e} to loop-value
        set {_t} to type of {_e}
        set {_gg::*} to yaml list "smoker.%{_t}%" from "bck.server.grimhunt.config"
        if {_gg::*} is "<none>":
            stop
        set yaml list "smoker.%{_t}%" from "bck.manager.grimhunt.data" to {_dx.%{_aa}%::*}
        save yaml "bck.manager.grimhunt.data"
        add 1 to {_aa}
    wait 10 ticks
    send "§6[§4BCK§6/§5Grimhunt§6]§r §5Grimhunt §econfig has been §aupdated §e!" to console
#                                      grimhuntHeal functions                                                                          #
function grimhuntHeal(player: player):
    if grimhuntDataBoolean("startHeal.status") is true:
        heal {_player}
#                                      grimhuntFeed functions                                                                          #
function grimhuntFeed(player: player):
    if grimhuntDataBoolean("startFeed.status") is true:
        feed {_player} by 20 beefs
#                                      grimhuntDay functions                                                                          #
function grimhuntDay():
    if grimhuntDataBoolean("startDay.status") is true:
        set time of world("world") to 06:00
#                                      grimhuntClear functions                                                                          #
function grimhuntClear(player: player):
    if grimhuntDataBoolean("startClear.status") is true:
        clear {_player}'s inventory
#                                      grimhuntClearAdvancements functions                                                                          #
function grimhuntClearAdvancements(player: player):
    if grimhuntDataBoolean("startClearAdvancements.status") is true:
        make console execute command "/advancement revoke %{_player}% everything"
        #superLog("§6[§4BCK§6/§5Grimhunt§6]§r",)
#                                      grimhuntKits functions                                                                          #
function grimhuntKits(player: player):
    if grimhuntDataBoolean("kits.status") is true:
        set {_items::*} to yaml list "kits.kit" from "bck.manager.grimhunt.data"
        if {_items::*} is set:
            loop {_items::*}:
                set {_v} to loop-value
                if "%{_v}%" doesn't contain " <":
                    set {_vn} to {_v}
                    set {_vc} to 1
                else:
                    set {_vd::*} to loop-value split by " <"
                    set {_vn} to {_vd::1}
                    set {_vc} to {_vd::2}
                    replace ">" with "" in {_vc} 
                    set {_vc} to {_vc} parsed as integer
                set {_i} to {_vn} parsed as item
                #broadcast "§a%{_v}% §7= §e%{_i}% §d:: §b%{_vc}%"
                if "%{_i}%" is not "<none>":
                    give {_vc} of {_i} to {_player}
function grimhuntRandomHunterCoordinate():
    if grimhuntDataBoolean("randomHunterCoordinate.status") is true:
        set {_n} to rng(1, listCounter({bck.hunters::*}))
        set {_r} to {bck.hunters::%{_n}%}
        set {_a} to {_r} parsed as player
        set {_x} to x-coordinate of {_a}
        set {_y} to x-coordinate of {_a}
        set {_z} to x-coordinate of {_a}
        set {_w} to world of {_a}
        set {_t} to selector({_a})
        add "%{_t}%" to {_args::*}
        add "%{_x}%" to {_args::*}
        add "%{_y}%" to {_args::*}
        add "%{_z}%" to {_args::*}
        add "%{_w}%" to {_args::*}
        grimhuntPlayersMultiLangSend("grimhunt.randomHunterCoordinate.coordinate", {_args::*})
#                                      grimhuntConfigGuiUpdater functions                                                                          #
function grimhuntConfigGuiUpdater(player: player):
    set {_gui} to {_player}'s current inventory
    set {_d} to lang("grimhunt.gui.updater.disabled", {_player})
    set {_e} to lang("grimhunt.gui.updater.enabled", {_player})
    set {_s} to lang("grimhunt.gui.updater.status", {_player})
    set {_rc} to lang("grimhunt.gui.updater.rightClick", {_player})
    set {_lc} to lang("grimhunt.gui.updater.leftClick", {_player})
    set {_co} to lang("grimhunt.gui.updater.comingSoon", {_player})
    set {_startHeal} to golden apple named "§cStarting Heal"
    if grimhuntDataBoolean("startHeal.status") is false:
        set {_status_start_heal} to {_d}
        disenchant {_startHeal}
    else:
        set {_status_start_heal} to {_e}
        enchant {_startHeal} with unbreaking 1

    set {_startFeed} to cooked beef named "§6Starting Feed"
    if grimhuntDataBoolean("startFeed.status") is false:
        set {_status_start_feed} to {_d}
        disenchant {_startFeed}
    else:
        set {_status_start_feed} to {_e}
        enchant {_startFeed} with unbreaking 1

    set {_startDay} to clock named "§eStarting Day"
    if grimhuntDataBoolean("startDay.status") is false:
        set {_status_start_day} to {_d}
        disenchant {_startDay}
    else:
        set {_status_start_day} to {_e}
        enchant {_startDay} with unbreaking 1

    set {_startClear} to lava bucket named "§dStarting Clear"
    if grimhuntDataBoolean("startClear.status") is false:
        set {_status_start_clear} to {_d}
        disenchant {_startClear}
    else:
        set {_status_start_clear} to {_e}
        enchant {_startClear} with unbreaking 1

    set {_particles} to redstone named "§4Particles"
    if grimhuntDataBoolean("particles.status") is false:
        set {_status_particles} to {_d}
        disenchant {_particles}
    else:
        set {_status_particles} to {_e}
        enchant {_particles} with unbreaking 1

    set {_forge} to furnace named "§6Forge"
    if grimhuntDataBoolean("forge.status") is false:
        set {_status_forge} to {_d}
        disenchant {_forge}
    else:
        set {_status_forge} to {_e}
        enchant {_forge} with unbreaking 1

    set {_kits} to iron sword named "§1Kits"
    if grimhuntDataBoolean("kits.status") is false:
        set {_status_kits} to {_d}
        disenchant {_kits}
    else:
        set {_status_kits} to {_e}
        enchant {_kits} with unbreaking 1
    
    set {_randomHunterCoordinate} to compass named "§bRandom Hunter Coordinate"
    if grimhuntDataBoolean("randomHunterCoordinate.status") is false:
        set {_status_randomHunterCoordinate} to {_d}
        disenchant {_randomHunterCoordinate}
    else:
        set {_status_randomHunterCoordinate} to {_e}
        enchant {_randomHunterCoordinate} with unbreaking 1

    set {_startClearAdvancements} to empty bottle named "§aStarting Clear Advancements"
    if grimhuntDataBoolean("startClearAdvancements.status") is false:
        set {_status_startClearAdvancements} to {_d}
        disenchant {_startClearAdvancements}
    else:
        set {_status_startClearAdvancements} to {_e}
        enchant {_startClearAdvancements} with unbreaking 1

    set {_keepTeam} to writable book named "§5Keep Team"
    if grimhuntDataBoolean("keepTeam.status") is false:
        set {_status_keepTeam} to {_d}
        disenchant {_keepTeam}
    else:
        set {_status_keepTeam} to {_e}
        enchant {_keepTeam} with unbreaking 1

    set {_smoker} to smoker named "§3Smoking"
    if grimhuntDataBoolean("smoker.status") is false:
        set {_status_smoker} to {_d}
        disenchant {_smoker}
    else:
        set {_status_smoker} to {_e}
        enchant {_smoker} with unbreaking 1

    set {_comingSoon1} to impulse command block named "§oComing Soon"
    if grimhuntDataBoolean("comingSoon1.status") is false:
        set {_status_comingSoon1} to {_d}
        disenchant {_comingSoon1}
    else:
        set {_status_comingSoon1} to {_e}
        enchant {_comingSoon1} with unbreaking 1

    set {_comingSoon2} to impulse command block named "§oComing Soon"
    if grimhuntDataBoolean("comingSoon2.status") is false:
        set {_status_comingSoon2} to {_d}
        disenchant {_comingSoon2}
    else:
        set {_status_comingSoon2} to {_e}
        enchant {_comingSoon} with unbreaking 1

    set {_comingSoon3} to impulse command block named "§oComing Soon"
    if grimhuntDataBoolean("comingSoon3.status") is false:
        set {_status_comingSoon3} to {_d}
        disenchant {_comingSoon3}
    else:
        set {_status_comingSoon3} to {_e}
        enchant {_comingSoon3} with unbreaking 1

    set {_comingSoon4} to impulse command block named "§oComing Soon"
    if grimhuntDataBoolean("comingSoon4.status") is false:
        set {_status_comingSoon4} to {_d}
        disenchant {_comingSoon4}
    else:
        set {_status_comingSoon4} to {_e}
        enchant {_comingSoon4} with unbreaking 1

    set line 2 of lore of {_startHeal} to "%{_s}% %{_status_start_heal}% %{_lc}%"
    set line 4 of lore of {_startHeal} to lang("grimhunt.gui.updater.lore.start_heal", {_player})

    set line 2 of lore of {_startFeed} to "%{_s}% %{_status_start_feed}% %{_lc}%"
    set line 4 of lore of {_startFeed} to lang("grimhunt.gui.updater.lore.start_feed", {_player})

    set line 2 of lore of {_startDay} to "%{_s}% %{_status_start_day}% %{_lc}%"
    set line 4 of lore of {_startDay} to lang("grimhunt.gui.updater.lore.start_day", {_player})

    set line 2 of lore of {_startClear} to "%{_s}% %{_status_start_clear}% %{_lc}%"
    set line 4 of lore of {_startClear} to lang("grimhunt.gui.updater.lore.start_clear", {_player})

    set line 2 of lore of {_particles} to "%{_s}% %{_status_particles}% %{_lc}%"
    set line 4 of lore of {_particles} to lang("grimhunt.gui.updater.lore.particles", {_player})

    set line 2 of lore of {_forge} to "%{_s}% %{_status_forge}% %{_lc}%"
    set line 4 of lore of {_forge} to lang("grimhunt.gui.updater.lore.forge.1", {_player})
    set {_forgeOresXpStatus} to {_d}
    if grimhuntDataBoolean("forge.oresXp") is true:
        set {_forgeOresXpStatus} to {_e}
    add {_forgeOresXpStatus} to {_fArgs::*}
    set line 6 of lore of {_forge} to superLang("grimhunt.gui.updater.lore.forge.oresXp", {_player}, {_fArgs::*})
    set line 8 of lore of {_forge} to "%{_s}% %{_forgeOresXpStatus}% %{_rc}%"
    set line 10 of lore of {_forge} to lang("grimhunt.gui.updater.lore.forge.2", {_player})

    set line 2 of lore of {_kits} to "%{_s}% %{_status_kits}% %{_rc}%"
    set line 4 of lore of {_kits} to lang("grimhunt.gui.updater.lore.kits", {_player})
    set {_kits::*} to yaml list "kits.kit" from "bck.manager.grimhunt.data"
    if "%{_kits::*}%" is "<none>":
        set line 5 of lore of {_kits} to lang("grimhunt.gui.updater.noKitFound", {_player})
    else:
        set line 6 of lore of {_kits} to lang("grimhunt.gui.updater.currentKit", {_player})
        set {_c} to 7
        set {_co} to "§b"
        set {_mm::*} to all items
        loop {_kits::*}:
            if loop-value doesn't contain " <":
                set {_vn} to loop-value
                set {_vc} to 1
            else:
                set {_vd::*} to loop-value split by " <"
                set {_vn} to {_vd::1}
                set {_vc} to {_vd::2}
                replace ">" with "" in {_vc} 
                set {_vc} to {_vc} parsed as integer
                if {_vc} is 0:
                    set {_vc} to 1
            if "%{_mm::*}%" doesn't contain {_vn}:
                set {_co} to "§3§m"
            set line {_c} of lore of {_kits} to "§e➛ %{_co}%%{_vn}%§r §dx%{_vc}%§r"
            add 1 to {_c}
    
    set line 2 of lore of {_randomHunterCoordinate} to "%{_s}% %{_status_randomHunterCoordinate}% %{_lc}%"
    set line 4 of lore of {_randomHunterCoordinate} to lang("grimhunt.gui.updater.lore.randomHunterCoordinate", {_player})

    set line 2 of lore of {_startClearAdvancements} to "%{_s}% %{_status_startClearAdvancements}% %{_lc}%"
    set line 4 of lore of {_startClearAdvancements} to lang("grimhunt.gui.updater.lore.startClearAdvancements", {_player})

    set line 2 of lore of {_keepTeam} to "%{_s}% %{_status_keepTeam}% %{_lc}%"
    set line 4 of lore of {_keepTeam} to lang("grimhunt.gui.updater.lore.keepTeam", {_player})

    set line 2 of lore of {_smoker} to "%{_s}% %{_status_smoker}% %{_lc}%"
    set line 4 of lore of {_smoker} to lang("grimhunt.gui.updater.lore.smoker", {_player})

    set line 2 of lore of {_comingSoon1} to "%{_s}% %{_status_comingSoon1}% %{_co}%"
    set line 4 of lore of {_comingSoon1} to lang("grimhunt.gui.updater.lore.comingSoon1", {_player})

    set line 2 of lore of {_comingSoon2} to "%{_s}% %{_status_comingSoon2}% %{_co}%"
    set line 4 of lore of {_comingSoon2} to lang("grimhunt.gui.updater.lore.comingSoon2", {_player})

    set line 2 of lore of {_comingSoon3} to "%{_s}% %{_status_comingSoon3}% %{_co}%"
    set line 4 of lore of {_comingSoon3} to lang("grimhunt.gui.updater.lore.comingSoon3", {_player})

    set line 2 of lore of {_comingSoon4} to "%{_s}% %{_status_comingSoon4}% %{_co}%"
    set line 4 of lore of {_comingSoon4} to lang("grimhunt.gui.updater.lore.comingSoon4", {_player})
    
    set slot 22 of {_gui} to air
    set slot 10 of {_gui} to {_startHeal}
    set slot 11 of {_gui} to {_startFeed}
    set slot 12 of {_gui} to {_startDay}
    set slot 13 of {_gui} to {_startClear}
    set slot 14 of {_gui} to {_startClearAdvancements}
    set slot 15 of {_gui} to {_particles}
    set slot 16 of {_gui} to {_forge}
    set slot 19 of {_gui} to {_kits}
    set slot 20 of {_gui} to {_randomHunterCoordinate}
    set slot 21 of {_gui} to {_keepTeam}
    set slot 22 of {_gui} to {_smoker}
    set slot 23 of {_gui} to {_comingSoon1}
    set slot 24 of {_gui} to {_comingSoon2}
    set slot 25 of {_gui} to {_comingSoon3}
    set slot 28 of {_gui} to {_comingSoon4}
#                                      Grimhunt Gui Gestions Trigger                                                                       #
on inventory click: 
    if userData(player, "data.inv") is "false":
        stop
    if userData(player, "data.inv") is "manager.grimhunt.config.main":
        cancel event
        set {_i} to event-slot
        set {_t} to type of {_i}
        set {_n} to display name of {_i}
        set {_u} to uncolored {_n}
        if click action is left mouse button:
            if {_t} is not air:
                if "%{_t}%" contain "barrier":
                    if {_u} contain "Back":
                        close player's inventory
                else if "%{_t}%" contain "redstone":
                    if {_u} contain "Particles":
                        if grimhuntDataBoolean("particles.status") is false:
                            grimhuntDataBoolean("particles.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7particles.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7particles.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("particles.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7particles.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7particles.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                        loop all players:
                            if userData(loop-player, "data.inv") is "manager.grimhunt.config.main":
                                grimhuntConfigGuiUpdater(loop-player)
                        #grimhuntConfigGuiUpdater(player)
                else if "%{_t}%" is "golden apple":
                    if {_u} is "Starting Heal":
                        if grimhuntDataBoolean("startHeal.status") is false:
                            grimhuntDataBoolean("startHeal.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7startHeal.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7startHeal.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("startHeal.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7startHeal.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7startHeal.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                        loop all players:
                            if userData(loop-player, "data.inv") is "manager.grimhunt.config.main":
                                grimhuntConfigGuiUpdater(loop-player)
                else if "%{_t}%" contain "steak":
                    if {_u} is "Starting Feed":
                        if grimhuntDataBoolean("startFeed.status") is false:
                            grimhuntDataBoolean("startFeed.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7startFeed.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7startFeed.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("startFeed.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7startFeed.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7startFeed.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                        loop all players:
                            if userData(loop-player, "data.inv") is "manager.grimhunt.config.main":
                                grimhuntConfigGuiUpdater(loop-player)
                else if "%{_t}%" contain "clock":
                    if {_u} is "Starting Day":
                        if grimhuntDataBoolean("startDay.status") is false:
                            grimhuntDataBoolean("startDay.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7startDay.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7startDay.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("startDay.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7startDay.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7startDay.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                        loop all players:
                            if userData(loop-player, "data.inv") is "manager.grimhunt.config.main":
                                grimhuntConfigGuiUpdater(loop-player)
                else if "%{_t}%" is "lava bucket":
                    if {_u} is "Starting Clear":
                        if grimhuntDataBoolean("startClear.status") is false:
                            grimhuntDataBoolean("startClear.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7startClear.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7startClear.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("startClear.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7startClear.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7startClear.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                        loop all players:
                            if userData(loop-player, "data.inv") is "manager.grimhunt.config.main":
                                grimhuntConfigGuiUpdater(loop-player)
                else if "%{_t}%" is "furnace":
                    if {_u} is "Forge":
                        if grimhuntDataBoolean("forge.status") is false:
                            grimhuntDataBoolean("forge.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7forge.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7forge.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("forge.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7forge.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7forge.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                        loop all players:
                            if userData(loop-player, "data.inv") is "manager.grimhunt.config.main":
                                grimhuntConfigGuiUpdater(loop-player)
                else if "%{_t}%" is "iron sword":
                    if {_u} is "Kits":
                        if grimhuntDataBoolean("kits.status") is false:
                            grimhuntDataBoolean("kits.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7kits.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7kits.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("kits.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7kits.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7kits.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                        loop all players:
                            if userData(loop-player, "data.inv") is "manager.grimhunt.config.main":
                                grimhuntConfigGuiUpdater(loop-player)
                else if "%{_t}%" is "compass":
                    if {_u} is "Random Hunter Coordinate":
                        if grimhuntDataBoolean("randomHunterCoordinate.status") is false:
                            if listCounter({bck.hunters::*}) > 1:
                                grimhuntDataBoolean("randomHunterCoordinate.status", "set", true)
                                superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7randomHunterCoordinate.status§r", "4")
                                superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7randomHunterCoordinate.status§r", "6", true)
                                play sound "entity.experience_orb.pickup" with volume 0.3 for player
                            else:
                                send lang("grimhunt.randomHunterCoordinate.notEnoughHunters", player)
                                play sound "entity.villager.no" with volume 0.5 for player
                        else:
                            grimhuntDataBoolean("randomHunterCoordinate.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7randomHunterCoordinate.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7randomHunterCoordinate.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                else if "%{_t}%" is "empty bottle":
                    if {_u} is "Starting Clear Advancements":
                        if grimhuntDataBoolean("startClearAdvancements.status") is false:
                            grimhuntDataBoolean("startClearAdvancements.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7startClearAdvancements.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7startClearAdvancements.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("startClearAdvancements.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7startClearAdvancements.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7startClearAdvancements.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                else if "%{_t}%" is "writable book":
                    if {_u} is "Keep Team":
                        if grimhuntDataBoolean("keepTeam.status") is false:
                            grimhuntDataBoolean("keepTeam.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7keepTeam.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7keepTeam.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("keepTeam.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7keepTeam.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7keepTeam.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                else if "%{_t}%" is "smoker":
                    if {_u} is "Smoking":
                        if grimhuntDataBoolean("smoker.status") is false:
                            grimhuntDataBoolean("smoker.status", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7smoker.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7smoker.status§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("smoker.status", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7smoker.status§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7smoker.status§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player      
                loop all players:
                    if userData(loop-player, "data.inv") is "manager.grimhunt.config.main":
                        grimhuntConfigGuiUpdater(loop-player)
        else if click action is right mouse button:
            if {_t} is not air:
                if "%{_t}%" contain "barrier":
                    if {_u} contain "Back":
                        close player's inventory
                else if "%{_t}%" is "furnace":
                    if {_u} is "Forge":
                        if grimhuntDataBoolean("forge.status") is false:
                            play sound "block.anvil.place" with volume 0.5 for player
                            stop
                        if grimhuntDataBoolean("forge.oresXp") is false:
                            grimhuntDataBoolean("forge.oresXp", "set", true)
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §aactivated §7forge.oresXp§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §aactivated §7forge.oresXp§r", "6", true)
                            play sound "entity.experience_orb.pickup" with volume 0.3 for player
                        else:
                            grimhuntDataBoolean("forge.oresXp", "set")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%selector(player)%§r has been §4desactivated §7forge.oresXp§r", "4")
                            superLog("§6[§4BCK§6/§5Grimhunt§6/§dConfig§6]§r §7%player%§r has been §4desactivated §7forge.oresXp§r", "6", true)
                            play sound "entity.villager.no" with volume 0.5 for player
                        loop all players:
                            if userData(loop-player, "data.inv") is "manager.grimhunt.config.main":
                                grimhuntConfigGuiUpdater(loop-player)
#                                      randomHunterCoordinate trigger                                                                          #                    
every 1 seconds:
    if {grimhunt.game.started} is true:
        set {_c} to grimhuntDataInteger("randomHunterCoordinate.chance")
        if grimhuntDataInteger("randomHunterCoordinate.chance") is not set:
            set {_c} to 5
        set {_v} to false
        chance of {_c}%:
            grimhuntRandomHunterCoordinate()
#                                      runner command                                                                          #
command /runner [<text>] [<player>]:
    trigger:
        if arg-1 is not set:
            send lang("grimhunt.command.runner.noOptions", player)
            stop
        if arg-1 is "add":
            if arg-2 is not set:
                send lang("grimhunt.command.runner.add.notSpecified", player, "language", false)
                stop
            if {bck.runners::*} doesn't contain "%arg-2%":
                if {bck.hunters::*} doesn't contain "%arg-2%":
                    add arg-2 to {bck.runners::*}
                    add "%arg-2%" to {_args::*}
                    send superLang("grimhunt.command.runner.add.success", player, {_args::*})
                    send lang("grimhunt.command.runner.add.sendSuccess", arg-2) to arg-2
                    set {_s} to selector(arg-2)
                    superLog("§6[§4BCK§6/§5Grimhunt§6]§r §7%{_s}% §rhas just been added as a §7runner", "6.4")
                else:
                    add "%arg-2%" to {_args::*}
                    send superLang("grimhunt.command.runner.isHunter", player, {_args::*})
            else:
                add "%arg-2%" to {_args::*}
                send superLang("grimhunt.command.runner.add.alreadyRunner", player, {_args::*})
        else if arg-1 is "remove":
            if arg-2 is not set:
                send lang("grimhunt.command.runner.remove.notSpecified", player, "language", false)
                stop
            if {bck.runners::*} contain "%arg-2%":
                if {bck.hunters::*} doesn't contain "%arg-2%":
                    remove arg-2 from {bck.runners::*}
                    add "%arg-2%" to {_args::*}
                    send superLang("grimhunt.command.runner.remove.success", player, {_args::*})
                    send lang("grimhunt.command.runner.remove.sendSuccess", arg-2) to arg-2
                    set {_s} to selector(arg-2)
                    superLog("§6[§4BCK§6/§5Grimhunt§6]§r §7%{_s}% §rhas just been removed from §7runner", "6.4")
                else:
                    add "%arg-2%" to {_args::*}
                    send superLang("grimhunt.command.runner.isHunter", player, {_args::*})
            else:
                add "%arg-2%" to {_args::*}
                send superLang("grimhunt.command.runner.remove.notRunner", player, {_args::*})
        else:
            send lang("grimhunt.command.runner.noOptions", player)
#                                      hunter command                                                                          #
command /hunter [<text>] [<player>]:
    trigger:
        if arg-1 is not set:
            send lang("grimhunt.command.hunter.noOptions", player)
            stop
        if arg-1 is "add":
            if arg-2 is not set:
                send lang("grimhunt.command.hunter.add.notSpecified", player, "language", false)
                stop
            if {bck.hunters::*} doesn't contain "%arg-2%":
                if {bck.runners::*} doesn't contain "%arg-2%":
                    add arg-2 to {bck.hunters::*}
                    add "%arg-2%" to {_args::*}
                    send superLang("grimhunt.command.hunter.add.success", player, {_args::*})
                    send lang("grimhunt.command.hunter.add.sendSuccess", arg-2) to arg-2
                    set {_s} to selector(arg-2)
                    superLog("§6[§4BCK§6/§5Grimhunt§6]§r §7%{_s}% §rhas just been added as a §7hunter", "6.4")
                else:
                    add "%arg-2%" to {_args::*}
                    send superLang("grimhunt.command.hunter.isRunner", player, {_args::*})
            else:
                add "%arg-2%" to {_args::*}
                send superLang("grimhunt.command.hunter.add.alreadyHunter", player, {_args::*})
        else if arg-1 is "remove":
            if arg-2 is not set:
                send lang("grimhunt.command.hunter.remove.notSpecified", player, "language", false)
                stop
            if {bck.hunters::*} contain "%arg-2%":
                if {bck.runners::*} doesn't contain "%arg-2%":
                    remove arg-2 from {bck.hunters::*}
                    add "%arg-2%" to {_args::*}
                    send superLang("grimhunt.command.hunter.remove.success", player, {_args::*})
                    send lang("grimhunt.command.hunter.remove.sendSuccess", arg-2) to arg-2
                    set {_s} to selector(arg-2)
                    superLog("§6[§4BCK§6/§5Grimhunt§6]§r §7%{_s}% §rhas just been removed from §7hunter", "6.4")
                else:
                    add "%arg-2%" to {_args::*}
                    send superLang("grimhunt.command.hunter.isRunner", player, {_args::*})
            else:
                add "%arg-2%" to {_args::*}
                send superLang("grimhunt.command.hunter.remove.notHunter", player, {_args::*})
        else:
            send lang("grimhunt.command.hunter.noOptions", player)
#                                      tab complete grimhunt                                                                          #
on tab complete of "/grimhunt":
    if hasPermission(player, "server.command.grimhunt") is false:
        stop
    add "start" to {_data::*}
    add "stop" to {_data::*}
    add "runners" to {_data::*}
    add "hunters" to {_data::*}
    add "config" to {_data::*}
    add "info" to {_data::*}
    add "revive" to {_data::*}
    if hasPermission(player, "server.owner") is true:
        add "admin.start" to {_data::*}
        add "admin.stop" to {_data::*}
        add "admin.allList" to {_data::*}
    set tab completions for position 1 to {_data::*}
    if tab arg-1 is "revive":
        set tab completions for position 2 to grimhuntPlayersList()
#                                      tab complete runner                                                                          #
on tab complete of "/runner":
    if hasPermission(player, "server.command.runner") is false:
        stop
    set tab completions for position 1 to "add" and "remove"
    if tab arg-1 is "add":
        loop all players:
            if {bck.runners::*} doesn't contain "%loop-player%":
                add loop-player to {_x::*}
        set tab completions for position 2 to {_x::*}
    else if tab arg-1 is "remove":
        set tab completions for position 2 to {bck.runners::*}
#                                      tab complete hunter                                                                          #
on tab complete of "/hunter":
    if hasPermission(player, "server.command.hunter") is false:
        stop
    set tab completions for position 1 to "add" and "remove"
    if tab arg-1 is "add":
        loop all players:
            if {bck.hunters::*} doesn't contain "%loop-player%":
                add loop-player to {_x::*}
        set tab completions for position 2 to {_x::*}
    else if tab arg-1 is "remove":
        set tab completions for position 2 to {bck.hunters::*}
#                                      grimhuntCompassGive functions                                                                          #
function grimhuntCompassGive(player: player):
    set {_i} to compass
    set {_s} to selector({_player})
    superLog("§6[§4BCK§6/§5Grimhunt§6]§r Compass given to §7%{_s}%", "5")
    give {_i} to {_player}
#                                      grimhuntTeamCreate functions                                                                          #
function grimhuntTeamCreate(callback: boolean=false):
    make console execute command "/team add bck_runners"
    if {_callback} is true:
        superLog("§6[§4BCK§6]§r team §7bck_runners §r has been §2created", "4")
    make console execute command "/team add bck_hunters"
    if {_callback} is true:
        superLog("§6[§4BCK§6]§r team §7bck_hunters §r has been §2created", "4")
    make console execute command "/team modify bck_runners color green"
    make console execute command "/team modify bck_hunters color dark_red"
#                                      grimhuntTeamDelete functions                                                                          #
function grimhuntTeamDelete(callback: boolean=false):
    make console execute command "/team remove bck_runners"
    if {_callback} is true:
        superLog("§6[§4BCK§6]§r team §7bck_runners §r has been §4deleted", "4")
    make console execute command "/team remove bck_hunters"
    if {_callback} is true:
        superLog("§6[§4BCK§6]§r team §7bck_hunters §r has been §4deleted", "4")
#                                      grimhuntTeamJoin functions                                                                          #
function grimhuntTeamJoin(callback: boolean=false):
    loop {bck.runners::*}:
        make console execute command "/team join bck_runners %loop-value%"
        if {_callback} is true:
            set {_s} to selector(loop-value)
            superLog("§6[§4BCK§6]§r §7%{_s}% §rhas been §2join §arunner §rteam", "4")
    loop {bck.hunters::*}:
        make console execute command "/team join bck_hunters %loop-value%"
        if {_callback} is true:
            set {_s} to selector(loop-value)
            superLog("§6[§4BCK§6]§r §7%{_s}% §rhas been §2join §4hunter §rteam", "4")
#                                      grimhuntParticles functions                                                                          #
function grimhuntParticle():
    if grimhuntDataBoolean("particles.status") is true:
        loop {bck.hunters::*}:
            if loop-value's tool is compass:
                set {_nn} to {grimhunt.compass.%loop-value%.num}
                set {_xx} to {bck.runners::%{_nn}%}
                set {_dist} to distance between loop-value and {_xx}
                set {_targetLocation} to {_xx}'s location
                set {_playerLocation} to loop-value's location
                set {_x} to loop-value
                set {_direction} to {_targetLocation} - {_playerLocation}
                set {_magnitude} to 1.25
                set {_unitDirection} to {_direction} normalized
                set {_offset} to {_unitDirection} * {_magnitude}
                set {_x} to x-coordinate of {_playerLocation} 
                set {_y} to y-coordinate of {_playerLocation} + 1.25
                set {_z} to z-coordinate of {_playerLocation} 
                set {_xx} to x-coordinate of {_playerLocation}'s eye 
                set {_yy} to y-coordinate of {_playerLocation}'s eye 
                set {_zz} to z-coordinate of {_playerLocation}'s eye 
                set {_loc} to location({_x}, {_y}, {_z})
                set {_loc2} to location({_xx}, {_yy}, {_zz})
                set {_v} to vector from loop-value to {_xx}
                set vector length of {_v} to 0.1
                #send "%{_loc}%" to loop-value
                #send "%{_direction}%" to loop-value
                #send "a" to loop-value-1
                loop (distance between loop-value's location and {_targetLocation}) / 0.1 times:
                    if {_dist} < 11:
                        draw 1 of dust using dustOption(light green, 0.7) at {_loc2} with force
                        send actionbar "§a%{_dist}%" to all players
                    else if {_dist} < 16:
                        draw 1 of dust using dustOption(green, 0.7) at {_loc2} with force
                        send actionbar "§2%{_dist}%" to all players
                    else if {_dist} < 26:
                        draw 1 of dust using dustOption(yellow, 0.7) at {_loc2} with force
                        send actionbar "§e%{_dist}%" to all players
                    else if {_dist} < 51:
                        draw 1 of dust using dustOption(orange, 0.7) at {_loc2} with force
                        send actionbar "§6%{_dist}%" to all players
                    else if {_dist} < 101:
                        draw 1 of dust using dustOption(light red, 0.7) at {_loc2} with force
                        send actionbar "§c%{_dist}%" to all players
                    else if {_dist} < 151:
                        draw 1 of dust using dustOption(red, 0.7) at {_loc2} with force
                        send actionbar "§4%{_dist}%" to all players
                    else:
                        draw 1 of dust using dustOption(black, 0.7) at {_loc2} with force
                        send actionbar "§0%{_dist}%" to all players
                    set {_loc2} to {_loc} ~ {_v}
                    #wait 1 tick
                    #send "g" to loop-value-1
                #play particles at {_x}, {_y}, {_z} visible to all players with type "FLAME" and count 1
                #set {_magnitude} to {_magnitude} - 0.1
#                                      grimhunt autoGive compass at death                                                                      #
on respawn:
    if {grimhunt.game.started} is true:
        if {bck.hunters::*} contain "%player%":
            grimhuntCompassGive(player)
#                                      grimhunt ??                                                                          #
on player world change:
    if {bck.runners::*} contain "%player%":
#                                      grimhunt team chat & global chat                                                                          #
on chat:
    set {_s} to selector(player)
    set {_w} to grimhuntData("teamChatPrefix")
    if {_w} is not set:
        set {_w} to "!"
    if {bck.grimhunt.chat} is true:
        if {bck.runners::*} contain "%player%":
            cancel event
            set {_x} to message
            set {_data::*} to {_x} split by ""
            loop {_data::*}:
                set {_a} to loop-value
                if loop-index is "1":
                    replace {_w} with "" in {_a}
                add {_a} to {_da::*}
            set {_m} to (join {_da::*} with "")
            if {_data::1} is {_w}:
                send formatted "§6[§eGLOBAL§6] §2<%{_s}%§2> §r%{_m}%" to {bck.runners::*}
                send formatted "§6[§eGLOBAL§6] §2<%{_s}%§2> §r%{_m}%" to {bck.hunters::*}
                send formatted "§6[§eGLOBAL§6] §2<%player%§2> §r%{_m}%" to console
            else:
                send formatted "§6[§dTEAM§6] §2<%{_s}%§2> §r%message%" to {bck.runners::*}
                send formatted "§6[§dTEAM§6] §2<%player%§2> §r%message%" to console
        else if {bck.hunters::*} contain "%player%":
            cancel event
            set {_x} to message
            set {_data::*} to {_x} split by ""
            loop {_data::*}:
                set {_a} to loop-value
                if loop-index is "1":
                    replace {_w} with "" in {_a}
                add {_a} to {_da::*}
            set {_m} to (join {_da::*} with "")
            if {_data::1} is {_w}:
                send formatted "§6[§eGLOBAL§6] §4<%{_s}%§4> §r%{_m}%" to {bck.hunters::*}
                send formatted "§6[§eGLOBAL§6] §4<%{_s}%§4> §r%{_m}%" to {bck.runners::*}
                send formatted "§6[§eGLOBAL§6] §4<%player%§4> §r%{_m}%" to console
            else:
                send formatted "§6[§dTEAM§6] §4<%{_s}%§4> §r%message%" to {bck.hunters::*}
                send formatted "§6[§dTEAM§6] §4<%player%§4> §r%message%" to console
#                                      grimhunt compass targeting & Number tracking dimension                                                         #
every tick:
    loop all players:
        if {bck.runners::*} doesn't contain "%loop-player%":
            if {bck.hunters::*} contain "%loop-player%":
                if {grimhunt.compass.%loop-player%.num} is not set:
                    set {grimhunt.compass.%loop-player%.num} to 1
                set {_i} to loop-player's tool
                set {_o} to loop-player's offhand tool
                if {grimhunt.game.started} is not set:
                    if loop-player's tool is not compass:
                        exit loop
                    set line 1 of lore of loop-player's tool to lang("grimhunt.game.compass.notStarted", loop-player)
                    exit loop
                if loop-player's tool is not compass:
                    exit loop
                set {_nn} to {grimhunt.compass.%loop-player%.num}
                set {_xx} to {bck.runners::%{_nn}%}
                set {_xa} to "%{bck.runners::*}%"
                #broadcast "%loop-player%: %{_xx}%"
                if {_xx} is "<none>":
                    set {_xx} to lang("grimhunt.game.compass.notFound", loop-player)
                set line 1 of lore of loop-player's tool to "§4Target: §a%{_xx}%"
                set {_n} to {grimhunt.compass.%loop-player%.num}
                set the loop-player's compass target to location of {bck.runners::%{_n}%}
                if "%loop-player's world%" is not "world":
                    set {_dist} to distance between loop-player and {_xx}
                    if "%{_xx}'s world%" is "world":
                        set {_w} to "world"
                    else:
                        set {_w} to "world_nether"
                    if {_xx}'s world is not loop-player's world:
                        send actionbar "§7§o%{_xa}% §d➻ §a%{_xx}'s world%" to loop-player
                        exit loop
                    if {_dist} < 11:
                        send actionbar "§7§o%{_xa}% §d➻ §a%{_dist}%" to loop-player
                    else if {_dist} < 16:
                        send actionbar "§7§o%{_xa}% §d➻ §2%{_dist}%" to loop-player
                    else if {_dist} < 26:
                        send actionbar "§7§o%{_xa}% §d➻ §e%{_dist}%" to loop-player
                    else if {_dist} < 51:
                        send actionbar "§7§o%{_xa}% §d➻ §6%{_dist}%" to loop-player
                    else if {_dist} < 101:
                        send actionbar "§7§o%{_xa}% §d➻ §c%{_dist}%" to loop-player
                    else if {_dist} < 151:
                        send actionbar "§7§o%{_xa}% §d➻ §4%{_dist}%" to loop-player
                    else:
                        send actionbar "§7§o%{_xa}% §d➻ §0%{_dist}%" to loop-player
                # else:
                #     send actionbar "§7§k%{_xx}% §d~> §n§3%{_xx}'s world%" to loop-player
#                                      grimhunt particle show                                                                          #
every 3 ticks:
    loop all players:
        if {bck.runners::*} doesn't contain "%loop-player%":
            if {bck.hunters::*} contain "%loop-player%":
                grimhuntParticle()
#                                      grimhunt runner change trigger                                                                         #
on right click with compass:
    set {_c} to listCounter({bck.runners::*})
    if {grimhunt.game.started} is not set:
        set line 1 of lore of player's tool to lang("grimhunt.game.compass.notStarted", player)
        stop
    if listCounter({bck.runners::*}) > 1:
        if {bck.hunters::*} contain "%player%":
            if {grimhunt.compass.%player%.num} < {_c}:
                add 1 to {grimhunt.compass.%player%.num}
            else:
                set {grimhunt.compass.%player%.num} to 1
            set {_n} to {grimhunt.compass.%player%.num}
            set {_xx} to {bck.runners::%{_n}%}
            send actionbar "§4Target: §a%{_xx}%"
            set line 1 of lore of player's tool to "§4Target: §a%{_xx}%"
            

function grimhuntConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.grimhunt.config"
            save yaml "bck.manager.grimhunt.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.grimhunt.config" to {_data}
            save yaml "bck.manager.grimhunt.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.grimhunt.config" to {_data}
        save yaml "bck.manager.grimhunt.config"
    return "%{_result}%"
function grimhuntConfigInteger(find: text, mode: text="extract", data: integer=0) :: integer:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.grimhunt.config"
            save yaml "bck.manager.grimhunt.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.grimhunt.config" to {_data}
            save yaml "bck.manager.grimhunt.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.grimhunt.config" to {_data}
        save yaml "bck.manager.grimhunt.config"
    set {_result} to {_result} parsed as integer
    if {_result} is not set:
        set {_result} to 0
    return {_result}

function grimhuntData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.grimhunt.data"
            save yaml "bck.manager.grimhunt.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.grimhunt.data" to {_data}
            save yaml "bck.manager.grimhunt.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.grimhunt.data" to {_data}
        save yaml "bck.manager.grimhunt.data"
    return "%{_result}%"
function grimhuntDataInteger(find: text, mode: text="extract", data: integer=0) :: integer:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.grimhunt.data"
            save yaml "bck.manager.grimhunt.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.grimhunt.data" to {_data}
            save yaml "bck.manager.grimhunt.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.grimhunt.data" to {_data}
        save yaml "bck.manager.grimhunt.data"
    set {_result} to "%{_result}%" parsed as integer
    if {_result} is not set:
        set {_result} to 0
    return {_result}

function grimhuntDataBoolean(find: text, mode: text="extract", data: boolean=false) :: boolean:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.grimhunt.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.grimhunt.data"
            save yaml "bck.manager.grimhunt.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.grimhunt.data" to {_data}
            save yaml "bck.manager.grimhunt.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.grimhunt.data" to {_data}
        save yaml "bck.manager.grimhunt.data"
    if {_result} is not set:
        set {_result} to false
    return {_result}
function grimhuntServerConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.server.grimhunt.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.server.grimhunt.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.server.grimhunt.config"
            save yaml "bck.server.grimhunt.config"
        else:
            set yaml value "%{_find}%" from "bck.server.grimhunt.config" to {_data}
            save yaml "bck.server.grimhunt.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.server.grimhunt.config" to {_data}
        save yaml "bck.server.grimhunt.config"
    if "%{_result}%" is "<none>":
        set {_result} to {_find}
    return {_result}
function grimhuntServerConfigBoolean(find: text, mode: text="extract", data: boolean=false) :: boolean:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.server.grimhunt.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.server.grimhunt.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.server.grimhunt.config"
            save yaml "bck.server.grimhunt.config"
        else:
            set yaml value "%{_find}%" from "bck.server.grimhunt.config" to {_data}
            save yaml "bck.server.grimhunt.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.server.grimhunt.config" to {_data}
        save yaml "bck.server.grimhunt.config"
    if {_result} is not set:
        set {_result} to false
    return {_result}
#                                      grimhunt forge trigger & Xp drop                                                                         #
on break:
    set {_v} to grimhuntDataBoolean("forge.status")
    if {_v} is false:
        stop
    if {grimhunt.game.started} is false:
        stop
    if player's gamemode is creative:
        stop
    if "%{bck.runners::*}%" doesn't contain "%player%":
        if "%{bck.hunters::*}%" doesn't contain "%player%":
            stop
    if event-block is iron ore or deepslate iron ore:
        if {_v} is true:
            cancel event
            delete block
            play sound "entity.blaze.shoot" with volume 0.05 for player
            deleteAndDrop(player, event-location, iron ingot)
            experienceDrop(event-location, 1, 4)
            damage player's tool by 1
    else if event-block is gold ore or deepslate gold ore:
        if {_v} is true:
            cancel event
            delete block
            play sound "entity.blaze.shoot" with volume 0.05 for player
            deleteAndDrop(player, event-location, gold ingot)
            experienceDrop(event-location, 2, 7)
            damage player's tool by 1
    else if event-block is copper ore or deepslate copper ore:
        if {_v} is true:
            cancel event
            delete block
            play sound "entity.blaze.shoot" with volume 0.05 for player
            deleteAndDropMore(player, event-location, copper ingot)
            experienceDrop(event-location)
            damage player's tool by 1
    # else if event-block is stone:
    #     if {_v} is true:
    #         cancel event
    #         delete block
    #         play sound "entity.blaze.shoot" with volume 0.05 for player
    #         deleteAndDropNoFortune(player, event-location, stone)
    # else if event-block is deepslate:
    #     if {_v} is true:
    #         cancel event
    #         delete block
    #         play sound "entity.blaze.shoot" with volume 0.05 for player 
    #         deleteAndDropNoFortune(player, event-location, deepslate)
#                                      deleteAndDrop functions                                                                          #
function deleteAndDrop(player: player, location: location, dropItem: item):
    set {_fortune} to level of fortune of {_player}'s tool
    if {_fortune} is 1:
        set {_rng} to random integer between 1 and 2
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 1, {_rng})
    else if {_fortune} is 2:
        set {_rng} to random integer between 1 and 3
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 1, {_rng})
    else if {_fortune} is 3:
        set {_rng} to random integer between 1 and 4
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 1, {_rng})
    else if {_fortune} is 4:
        set {_rng} to random integer between 2 and 5
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 2, {_rng})
    else if {_fortune} is 5:
        set {_rng} to random integer between 2 and 6
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 2, {_rng})
    else if {_fortune} > 5:
        set {_rng} to random integer between 5 and {_fortune}
        set {_r} to {_rng}
        set {_g} to {_r}
        set {_c} to {_g}
        if {_g} >= 65:
            set {_gg} to {_g} / 64
            set {_gg} to ceil({_gg})
            loop {_gg} times:
                if {_c} < 64:
                    drop {_c} of {_dropItem} at {_location}
                else:
                    drop 64 of {_dropItem} at {_location}
                remove 64 from {_c}
        else:
            drop {_g} of {_dropItem} at {_location}
        experienceDrop({_location}, 5, {_rng})
        #drop {_r} of {_dropItem} at {_location}
    else:
        drop {_dropItem} at {_location}
        experienceDrop({_location}, 1, {_rng})
#                                      deleteAndDropMore functions                                                                          #
function deleteAndDropMore(player: player, location: location, dropItem: item, boosted: boolean=false):
    set {_fortune} to level of fortune of {_player}'s tool
    if {_fortune} is 1:
        set {_rng} to random integer between 3 and 8
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 1, {_rng})
    else if {_fortune} is 2:
        set {_rng} to random integer between 4 and 12
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 1, {_rng})
    else if {_fortune} is 3:
        set {_rng} to random integer between 5 and 18
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 1, {_rng})
    else if {_fortune} is 4:
        set {_rng} to random integer between 7 and 25
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 2, {_rng})
    else if {_fortune} is 5:
        set {_rng} to random integer between 15 and 34
        set {_r} to {_rng} + {_fortune}
        drop {_r} of {_dropItem} at {_location}
        experienceDrop({_location}, 2, {_rng})
    else if {_fortune} > 5:
        set {_rng} to random integer between 15 and {_fortune}
        set {_r} to {_rng}
        set {_g} to {_r}
        set {_c} to {_g}
        if {_g} >= 65:
            set {_gg} to {_g} / 64
            set {_gg} to ceil({_gg})
            loop {_gg} times:
                if {_c} < 64:
                    drop {_c} of {_dropItem} at {_location}
                else:
                    drop 64 of {_dropItem} at {_location}
                remove 64 from {_c}
        else:
            drop {_g} of {_dropItem} at {_location}
        experienceDrop({_location}, 5, {_rng})
    else:
        set {_rng} to random integer between 3 and 5
        drop {_rng} of {_dropItem} at {_location}
        experienceDrop({_location}, 1, {_rng})
#                                       deleteAndDropNoFortune function                                                                        #
function deleteAndDropNoFortune(player: player, location: location, dropItem: item):
    drop {_dropItem} at {_location}
#                                       experienceDrop function                                                                                 #
function experienceDrop(location: location, minxp: integer=1, maxxp: integer=3):
    if grimhuntDataBoolean("forge.oresXp") is true:
        set {_xp} to random number between {_minxp} and {_maxxp}
        spawn {_xp} of experience orb at {_location}
    else if grimhuntDataBoolean("smoker.status") is true:
        set {_xp} to random number between {_minxp} and {_maxxp}
        spawn {_xp} of experience orb at {_location}
#                                       grimhunt Function Win or Loose                                                                            #
function grimhuntWin(team: text):
    if {_team} is "runner":

    else if {_team} is "hunter":
#                                       Inventory Saver & Revive Trigger                                                                         #
# every tick:
#     if coreDataBoolean("pvp.status") is false:
#         loop all players:
#             set {_x} to loop-player
#             if {temp.%{_x}%.pvpCounter} >= 1:
#                 if {temp.%{_x}%.pvpCounter} < 
#                 send formatted lang("core.rules.pvp.notAllowed", {_x}) to {_x}
#             remove 1 from {temp.%{_x}%.pvpCounter}
on damage:
    if coreDataBoolean("pvp.status") is false:
        send formatted lang("core.rules.pvp.notAllowed", attacker) to attacker
        cancel event
    set {_c} to damage cause
    set {_d} to damage
    set {_a} to attacker
    set {_v} to victim
    set {_max} to maximum health of {_v}
    set {_w} to {_v}'s health
    if "%type of {_v}%" is "player":
        if userDataBoolean({_v}, "player.god") is true:
            cancel event
            stop
        if {bck.runners::*} contain {_v}:
            if {grimhunt.game.started} is not set:
                stop
            if {_v}'s tool is totem of undying:
                stop
            if offhand tool of {_v} is totem of undying:
                stop
            set {_a.0} to level of protection of {_v}'s helmet
            set {_a.1} to level of protection of {_v}'s chestplate
            set {_a.2} to level of protection of {_v}'s leggings
            set {_a.3} to level of protection of {_v}'s boots
            set {_resistance} to the amplifier of resistance of {_v}
            set {_rd} to 0
            loop {_a.0} times:
                add 4 to {_rd}
            loop {_a.1} times:
                add 4 to {_rd}
            loop {_a.2} times:
                add 4 to {_rd}
            loop {_a.3} times:
                add 4 to {_rd}
            loop {_resistance} times:
                add 20 to {_rd}
                #broadcast "R added"
            set {_r.0} to {_rd} / 100 
            set {_r.1} to mod({_rd}, 100)
            set {_r} to "%{_r.0}%" parsed as number
            #broadcast "O: %{_r}%"
            set {_reduced} to {_d} * (1 - {_r})
            #broadcast "    §e%{_v}%:§r%nl%§bFinal damage: §3%{_reduced}%§r%nl%§dOriginal damage: §5%{_d}%§r%nl%§cHealth: §4%{_w}%♥§r%nl%§7Resistance: §8%{_r}%§r"
            if {_w} > {_reduced}:
                stop
            if "%type of {_a}%" is not "player":
                userData({_v}, "data.grimhunt.temp.dead", "set", "true")
                cancel event
                play sound "entity.player.death" with volume 1 at {_v}
                set {_se} to selector({_v})
                set {_sa} to selectorMob({_a})
                if "%{_a}%" is "TNT":
                    set {_sa} to "TNT"
                else if "%{_a}%" is "explosive minecart":
                    set {_sa} to "Tnt Minecart"
                else:   
                    #broadcast "%{_a}%"
                set {_txt} to lang("grimhunt.death.runner_death.%{_c}%.1", {_v})
                if {_a} is set:
                    set {_cc} to randomColor()
                    if {_cc} is "§r":
                        set {_cc} to randomColor()
                    if {_cc} is "§r":
                        set {_cc} to randomColor()
                    add "§a%{_se}%§r" to {_args::*}
                    add "%{_cc}%%{_sa}%" to {_args::*}
                    grimhuntPlayersMultiLangSend("grimhunt.death.runner_death.%{_c}%.1", {_args::*})
                else:
                    add "§a%{_se}%§r" to {_args::*}
                    grimhuntPlayersMultiLangSend("grimhunt.death.runner_death.%{_c}%.1", {_args::*})
                    #grimhuntPlayersSend("§a%{_se}%§r %{_txt}%")
                grimhuntInventorySaver({_v}, true)
                heal {_v}
                set gamemode of {_v} to spectator
                clear all the potion effects of {_v}
                feed {_v}
                clear {_v}'s inventory
                stop
        
            set {_n} to listCounter({bck.runners::*})
            userData({_v}, "data.grimhunt.temp.dead", "set", "true")
            cancel event
            play sound "entity.player.death" with volume 1 at {_v}
            set {_se} to selector({_v})
            set {_sa} to selector({_a})
            set {_txt} to lang("grimhunt.death.runner_killed.%rng(1, 5)%", {_v})
            if {_v} is {_a}:
                add "§a%{_se}%§r" to {_args::*}
                set {_txt} to lang("grimhunt.death.runner_suicide.1", {_v})
                grimhuntPlayersMultiLangSend("grimhunt.death.runner_suicide.1", {_args::*})
                #grimhuntPlayersSend("§a%{_se}%§r %{_txt}%")
            else:
                add "§a%{_se}%§r" to {_args::*}
                add "§c%{_sa}%" to {_args::*}
                grimhuntPlayersMultiLangSend("grimhunt.death.runner_killed.%rng(1, 5)%", {_args::*})
                #grimhuntPlayersSend("§a%{_se}%§r %{_txt}% §c%{_sa}%")
            grimhuntInventorySaver({_v}, true)
            heal {_v}
            set gamemode of {_v} to spectator
            clear all the potion effects of {_v}
            feed {_v}
            clear {_v}'s inventory
function grimhuntSmoker(v: livingentity, x: livingentity):
    set {_o} to {_v}'s location
    set {_t} to type of {_v}
    set {_i::*} to yaml list "smoker.%{_t}%" from "bck.manager.grimhunt.data"
    loop {_i::*}:
        set {_d} to "%loop-value%"
        #broadcast "%{_d}%"
        if {_d} contain ":":
            set {_data::*} to {_d} split by ":"
            set {_i} to {_data::1}
            replace all "_" with " " in {_i} 
            set {_i} to {_i} parsed as item
            if {_data::2} contain "/":
                set {_c::*} to {_data::2} split by "/"
                set {_min} to {_c::1}
                set {_min} to {_min} parsed as integer
                set {_max} to {_c::2}
                set {_max} to {_max} parsed as integer
            else:
                set {_min} to 1
                set {_max} to 1
        
        if {_x} is set:
            set {_f} to level of looting of {_x}'s tool
            if {_f} is 1:
                add 1 to {_min}
                add rng(1, 2) to {_max}
            else if {_f} is 2:
                add 2 to {_min}
                add rng(2, 4) to {_max}
            else if {_f} is 3:
                add 3 to {_min}
                add rng(3, 6) to {_max}
            else:
                add 3 to {_min}
                add rng(3, {_f}) to {_max}
        set {_n} to rng({_min}, {_max})
        drop {_n} of {_i} at {_o}
        experienceDrop({_v}'s location, {_min}, {_max})
    
    #broadcast "%type of {_v}% = %{_i}% x %{_min}% / %{_max}%"

on death:
    set {_c} to damage cause
    set {_d} to damage
    set {_a} to attacker
    set {_v} to victim
    set {_max} to maximum health of {_v}
    set {_w} to {_v}'s health
    if "%type of {_v}%" is not "player":
        if grimhuntDataBoolean("smoker.status") is true:
            set {_i::*} to yaml list "smoker.%type of {_v}%" from "bck.manager.grimhunt.data"
            if "%{_i::*}%" is not "<none>":
                clear drops
                grimhuntSmoker({_v}, {_a})
                play sound "entity.blaze.shoot" with volume 0.3 for {_a}
#                                       grimhuntPlayersMultiLangSend functions                                                                         #
function grimhuntPlayersMultiLangSend(key: text, args: objects, type: text="text"):
    loop {bck.runners::*}:
        set {_v} to loop-value
        set {_w} to lang({_key}, {_v})
        set {_r} to "%{_w}%"
        set {_c} to 0
        loop {_args::*}:
            set {_e} to loop-value-2
            if "%{_w}%" contain "<arg%{_c}%>":
                replace all "<arg%{_c}%>" with {_e} in {_r}
            add 1 to {_c}
        if {_type} is "text":
            send formatted {_r} to {_v}
        else if {_type} is "title":
            send title {_r} to {_v}
    loop {bck.hunters::*}:
        set {_v} to loop-value
        set {_w} to lang({_key}, {_v})
        set {_r} to "%{_w}%"
        set {_c} to 0
        loop {_args::*}:
            set {_e} to loop-value-2
            if "%{_w}%" contain "<arg%{_c}%>":
                replace all "<arg%{_c}%>" with {_e} in {_r}
            add 1 to {_c}
        if {_type} is "text":
            send formatted {_r} to {_v}
        else if {_type} is "title":
            send title {_r} to {_v}
#                                       Inventory Saver functions                                                                         #
function grimhuntInventorySaver(player: player, drop: boolean=false):
    set {_s} to 0
    if {_helmet} is not set:
        set {_helmet} to air
    if {_chestplate} is not set:
        set {_chestplate} to air
    if {_leggings} is not set:
        set {_leggings} to air
    if {_boots} is not set:
        set {_boots} to air
    if {_off} is not set:
        set {_off} to air
    loop 36 times:
        set {_i} to slot {_s} of {_player}'s inventory
        set {_data::*} to "%{_i}%" split by " "
        set {_c} to {_data::1}
        set {_c} to {_c} parsed as integer
        if "%{_i}%" doesn't contain "0" or "1" or "2" or "3" or "4" or "5" or "6" or "7" or "8" or "9":
            set {_c} to 1
        set yaml value "inventory.%{_player}%.%{_s}%" from "bck.manager.grimhunt.data" to {_i}
        if {_drop} is true:
            drop {_i} at {_player}'s location
        #broadcast "Item: %{_i}%/%{_s}%"
        add 1 to {_s}
    if {_drop} is true:
        drop {_player}'s helmet at {_player}'s location
        drop {_player}'s chestplate at {_player}'s location
        drop {_player}'s leggings at {_player}'s location
        drop {_player}'s boots at {_player}'s location
        drop offhand tool of {_player} at {_player}'s location
    set yaml value "inventory.%{_player}%.helmet" from "bck.manager.grimhunt.data" to {_player}'s helmet
    set yaml value "inventory.%{_player}%.chestplate" from "bck.manager.grimhunt.data" to {_player}'s chestplate
    set yaml value "inventory.%{_player}%.leggings" from "bck.manager.grimhunt.data" to {_player}'s leggings
    set yaml value "inventory.%{_player}%.boots" from "bck.manager.grimhunt.data" to {_player}'s boots
    set yaml value "inventory.%{_player}%.off_hand" from "bck.manager.grimhunt.data" to offhand tool of {_player}
    set yaml value "inventory.%{_player}%.location" from "bck.manager.grimhunt.data" to {_player}'s location
    save "bck.manager.grimhunt.data"
function grimhuntPlayersList() :: objects:
    loop {bck.runners::*}:
        add loop-value to {_r::*}
    loop {bck.hunters::*}:
        add loop-value to {_r::*}
    return {_r::*}