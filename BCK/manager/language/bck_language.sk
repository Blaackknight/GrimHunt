on load:
    if {skripts::*} contains "core.sk" and "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading language..." to console
        send "§6[§4BCK§6/§b§lLanguage§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/language/config.yml" as "bck.manager.language.config"
        load yaml "plugins/Skript/scripts/BCK/manager/language/data.yml" as "bck.manager.language.data"
        #languageRegister()
    else:
        broadcast "§6[§4BCK§6/§b§lLanguage§6]§r Script loading cancel It requires (§lcore.sk§r and §lbck_manager.sk§r)"
        unload script file "bck_language.sk"
command /language [<text>] [<text>]:
    trigger:
        if arg-1 is set:
            if arg-1 is "client":
                if arg-2 is set:
                    if getLanguages() contains arg-2:
                        set {_uuu} to lang("language.languageClientSetTo", player)
                        send "%{_uuu}% §b§l%arg-2%"
                        userData(player, "data.language", "set", arg-2)
                        logCustom("§7%selector(player)% §rlanguage changed to §7%arg-2%")
                    else:
                        send lang("language.languageNotFound", player)
                else:
                    send "§c/language %arg-1% <language>"
            else if arg-1 is "server":
                if hasPermission(player, "op") is false:
                    send lang("language.noPermission", player)
                    stop
                if arg-2 is set:
                    if getLanguages() contains arg-2:
                        set {_uuu} to lang("language.languageServerSetTo", player)
                        send "%{_uuu}% §b§l%arg-2%"
                        languageData("data.server.language", "set", arg-2)
                        logCustom("§7%selector(player)% §rhas been changed server language to §7%arg-2%")
                    else:
                        send lang("language.languageNotFound", player)
                else:
                    send "§c/language %arg-1% <language>"
            else:
                set {_uuu} to lang("language.unknownOption", player)
                send "%{_uuu}% (%arg-1%)"
        else:
            send "§c/language <option>"
        #broadcast lang(arg-1, player, "language")
on tab complete of "/language":
    if hasPermission(player, "op") is true:
        set tab completions for position 1 to "client" and "server"
    else:
        set tab completions for position 1 to "client"
    if tab arg-1 is set:
        set tab completions for position 2 to getLanguages()
function languageConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.language.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.language.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.language.config"
            save yaml "bck.manager.language.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.language.config" to {_data}
            save yaml "bck.manager.language.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.language.config" to {_data}
        save yaml "bck.manager.language.config"
    return "%{_result}%"
function getLanguages() :: objects:
    loop files in dir "plugins/Skript/scripts/BCK/manager/language/language/":
        set {_l} to loop-value
        set {_data::*} to {_l} split by "language"
        set {_u} to {_data::3}
        replace "/" with "" in {_u}
        if {_u} contains ".yml":
            replace ".yml" with "" in {_u}
            add "%{_u}%" to {_r::*}
    return {_r::*}
function languageData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.language.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.language.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.language.data"
            save yaml "bck.manager.language.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.language.data" to {_data}
            save yaml "bck.manager.language.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.language.data" to {_data}
        save yaml "bck.manager.language.data"
    return "%{_result}%"
# function languageRegister():
#     loop files in dir "plugins/Skript/scripts/BCK/manager/":
#         set {_l} to loop-value
#         if {_l} doesn't contain ".yml" or ".sk":
#             if {_l} contain "usersdata":
#                 continue
#             loop files in dir "%{_l}%/language/":
#                 set {_ll} to loop-value-2
#                 set {_temp::*} to {_ll} split by "manager"
#                 add {_temp::2} to {_list::*}
#     loop {_list::*}:
#         set {_l} to loop-value
#         set {_data::*} to {_l} split by "/" or "\"
#     if {_data::*} contains "/" or "\":
#         loop {_list::*}:
#             set {_l} to loop-value
#             set {_data::*} to {_l} split by "/" or "\"
#     if {_data::*} contains "/" or "\":
#         loop {_list::*}:
#             set {_l} to loop-value
#             set {_data::*} to {_l} split by "/" or "\"
#     if {_data::*} contains "/" or "\":
#         loop {_list::*}:
#             set {_l} to loop-value
#             set {_data::*} to {_l} split by "/" or "\"
#     broadcast {_data::*}
#     # loop {_data::*}:
#     #     set {_l} to loop-value
#     #     set {_dat::*} to {_l} split by "/" or "\"
#     #     broadcast {_dat::*}
#                 #broadcast {_data::*}
#                 # set {_dat::*} to "%{_data::*}%" split by "/" or "\" or "and" or ","
#                 # loop {_dat::*}:
#                 #     set {_e} to loop-value-3
#                 #     broadcast {_e}
#                 #broadcast "%{_dat::*}%"
#                 # loop files in dir "%{_ll}%/":
#                 #     set {_f} to loop-value-3
#                 #     broadcast {_f}
#     # loop files in dir "plugins/Skript/scripts/BCK/":
#     #     set {_l} to loop-value
#     #     set {_data::*} to {_l} split by "BCK/"
#     #     set {_f} to {_data::2}
#     #     loop files in dir "%{_l}%":
#     #         set {_ll} to loop-value-2
#     #         set {_lA} to {_ll}
#     #         set {_data::*} to {_lA} split by "BCK/%{_f}%/"
#     #         set {_r} to {_data::2}
#     #         if {_r} doesn't contain ".yml":
#     #             #broadcast "%{_ll}%/language/"
#     #             loop files in dir "%{_ll}%/language/":
#     #                 set {_lll} to loop-value-3
#     #                 if "%{_lll}%" isn't "<none>":
#     #                     add {_lll} to {_temp::*} 
#     #                 # set {_data::*} to {_lll} split by "%{_ll}%/"
#     #                 # set {_r} to {_data::2}
#     #                 # broadcast {_lll}
#     #                 # if {_r} contain ".yml":
#     #                 #     #broadcast "Yaml: %{_r}%"
#     #                 #     #add "%{_r}%" to {skripts::*}
#     #         else:
#     #             broadcast "Yaml: %{_r}%"
#     #             #add "%{_r}%" to {_yml::*}
#     #broadcast {_temps::*}
   
#     # set {_list::*} to fileList("plugins/Skript/scripts/BCK/manager/", ".yml")
#     # loop {_list::*}:
#     #     if loop-value is not "config.yml" or "data.yml":
#     #         set {_l} to loop-value
#     #         replace ".yml" with "" in {_l}
#     #         add loop-value to {_raw::*}
#     #         if {languages::*} doesn't contain {_l}:
#     #             add {_l} to {_lang::*}
#     # set {languages::*} to {_lang::*}
#     # loop {_raw::*}:
#     #     set {_l} to loop-value
#     #     replace ".yml" with "" in {_l}
#     #     load yaml "plugins/Skript/scripts/BCK/manager/%loop-value%" as "bck.manager.language.%{_l}%"
#     #     broadcast "Raw: %{_l}%"
function lang(key: text, player: player, addon: text="language", replace: boolean=true) :: text:
    set {_lang} to userData({_player}, "data.language")
    if "%{_lang}%" is "<none>":
        set {_lang} to languageConfig("data.defaultLanguage")
        userData({_player}, "data.language", "set", "en")
    load yaml "plugins/Skript/scripts/BCK/manager/%{_addon}%/language/%{_lang}%.yml" as "bck.manager.%{_addon}%.%{_lang}%"
    set {_r} to yaml value {_key} from "bck.manager.%{_addon}%.%{_lang}%"
    if "%{_r}%" is "<none>":
        set {_r} to {_key}
    if {_replace} is true:
        replace all "<player>" with "%{_player}%" in {_r}
        replace all "<uuid>" with {_player}'s uuid in {_r}
        replace all "<lang>" with {_lang} in {_r}
        replace all "<randomColor>" with randomColor() in {_r}
        replace all "<addon>" with {_addon} in {_r}
    return {_r}
function serverLang(key: text, addon: text="language", replace: boolean=false) :: text:
    set {_lang} to languageData("data.server.language")
    if "%{_lang}%" is "<none>":
        set {_lang} to languageConfig("data.defaultLanguage")
        languageData("data.server.language", "set", {_lang})
    load yaml "plugins/Skript/scripts/BCK/manager/%{_addon}%/language/%{_lang}%.yml" as "bck.manager.%{_addon}%.%{_lang}%"
    set {_r} to yaml value {_key} from "bck.manager.%{_addon}%.%{_lang}%"
    if "%{_r}%" is "<none>":
        set {_r} to {_key}
    replace all "<player>" with "%{_player}%" in {_r}
    replace all "<uuid>" with {_player}'s uuid in {_r}
    replace all "<lang>" with {_lang} in {_r}
    replace all "<randomColor>" with randomColor() in {_r}
    replace all "<addon>" with {_addon} in {_r}
    return {_r}
function superLang(key: text, player: player, args: objects, addon: text="language") :: text:
    set {_lang} to userData({_player}, "data.language")
    if "%{_lang}%" is "<none>":
        set {_lang} to languageConfig("data.defaultLanguage")
        userData({_player}, "data.language", "set", "en")
    load yaml "plugins/Skript/scripts/BCK/manager/%{_addon}%/language/%{_lang}%.yml" as "bck.manager.%{_addon}%.%{_lang}%"
    set {_r} to yaml value {_key} from "bck.manager.%{_addon}%.%{_lang}%"
    if "%{_r}%" is "<none>":
        set {_r} to {_key}
    set {_c} to 0
    loop {_args::*}:
        set {_e} to loop-value
        if "%{_r}%" contain "<arg%{_c}%>":
            replace all "<arg%{_c}%>" with {_e} in {_r}
        add 1 to {_c}
    replace all "<player>" with "%{_player}%" in {_r}
    replace all "<uuid>" with {_player}'s uuid in {_r}
    replace all "<lang>" with {_lang} in {_r}
    replace all "<randomColor>" with randomColor() in {_r}
    replace all "<addon>" with {_addon} in {_r}
    return {_r}